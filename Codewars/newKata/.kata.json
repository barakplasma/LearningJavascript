{
  "id": "55466989aeecab5aac00003e",
  "name": "Rectangle into Squares",
  "slug": "rectangle-into-squares",
  "category": "games",
  "publishedAt": "2015-05-03T18:33:29Z",
  "approvedAt": "2015-05-08T16:44:33Z",
  "languages": [
    "python",
    "ruby",
    "java",
    "csharp",
    "clojure",
    "javascript",
    "haskell",
    "coffeescript",
    "cpp",
    "elixir",
    "typescript",
    "php",
    "crystal",
    "fsharp",
    "c",
    "rust",
    "swift",
    "r",
    "shell",
    "ocaml"
  ],
  "url": "https://www.codewars.com/kata/rectangle-into-squares",
  "rank": {
    "id": -6,
    "name": "6 kyu",
    "color": "yellow"
  },
  "createdAt": "2015-05-03T18:31:41Z",
  "createdBy": {
    "username": "g964",
    "url": "https://www.codewars.com/users/g964"
  },
  "approvedBy": {
    "username": "GiacomoSorbi",
    "url": "https://www.codewars.com/users/GiacomoSorbi"
  },
  "description": "The drawing below gives an idea of how to cut a given \"true\" rectangle into squares (\"true\" rectangle meaning that the two dimensions are different).\n\n![alternative text](http://i.imgur.com/lk5vJ7sm.jpg)\n\nCan you translate this drawing into an algorithm?\n\nYou will be given two dimensions \n\n1. a positive integer length (parameter named `lng`)\n2. a positive integer width (parameter named `wdth`)\n\nYou will return an array with the size of each of the  squares.\n\nShell bash returns a string.\n\n\n```python\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```crystal\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```elixir\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```php\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```ruby\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```javascript\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```typescript\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```coffeescript\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```clojure\n  sqInRect(5, 3) should return [3, 2, 1, 1]\n  sqInRect(3, 5) should return [3, 2, 1, 1]\n```\n```haskell\nsquaresInRect  5  3 `shouldBe` Just [3,2,1,1]\nsquaresInRect  3  5 `shouldBe` Just [3,2,1,1]\nsquaresInRect 20 14 `shouldBe` Just [14, 6, 6, 2, 2, 2]\n```\n```fsharp\nsquaresInRect  5  3 should return Some [3,2,1,1]\nsquaresInRect  3  5 should return Some [3,2,1,1]\nsquaresInRect 20 14 should return Some [14, 6, 6, 2, 2, 2]\n```\n```swift\nsquaresInRect  5  3 should return [3,2,1,1] as optional\nsquaresInRect  3  5 should return [3,2,1,1] as optional\nsquaresInRect 20 14 should return [14, 6, 6, 2, 2, 2] as optional\n```\n```java\n  sqInRect(5, 3) should return a List<Integer> {3, 2, 1, 1}\n  sqInRect(3, 5) should return a List<Integer> {3, 2, 1, 1}\n```\n```csharp\n  sqInRect(5, 3) should return a List<int> {3, 2, 1, 1}\n  sqInRect(3, 5) should return a List<int> {3, 2, 1, 1}\n```\n```cpp\n  sqInRect(5, 3) should return {3, 2, 1, 1}\n  sqInRect(3, 5) should return {3, 2, 1, 1}\n```\n```c\nC returns a structure, see the \"Solution\" and \"Examples\" tabs.\nYour result and the reference test solution are compared by strings.\n```\n\n#Note:\nlng == wdth as a starting case would be an entirely different problem and the drawing is planned to be interpreted with lng != wdth. See kata, [Square into Squares. Protect trees!](http://www.codewars.com/kata/54eb33e5bc1a25440d000891).\n\nWhen the initial parameters are so that `lng` == `wdth`, the solution `[lng]` would be the most obvious but not in the spirit of this kata so, in that case, return `None`/`nil`/`null`/`Nothing. Return {} with C++`. Return the string `\"nil\"` with Bash.\n\nIn that case the returned structure of **C** will have its `sz` component equal to `0`.\n(See the \"Solution\" and \"Examples\" tabs)\n\n\n```python\n  sqInRect(5, 5) should return None\n```\n```ruby\n  sqInRect(5, 5) should return nil\n```\n```crystal\n  sqInRect(5, 5) should return nil\n```\n```elixir\n  sqInRect(5, 5) should return nil\n```\n```javascript\n  sqInRect(5, 5) should return null\n```\n```php\n  sqInRect(5, 5) should return null\n```\n```typescript\n  sqInRect(5, 5) should return null\n```\n```coffeescript\n  sqInRect(5, 5) should return null\n```\n```clojure\n  sqInRect(5, 5) should return nil\n```\n```java\n  sqInRect(5, 5) should return null\n```\n```csharp\n  sqInRect(5, 5) should return null\n```\n```cpp\n  sqInRect(5, 5) should return {}\n```\n```haskell\nsquaresInRect 5 5 `shouldBe` Nothing\n```\n```fsharp\nsquaresInRect 5 5 should return None\n```\n```swift\nsquaresInRect 5 5 should return nil\n```",
  "totalAttempts": 38058,
  "totalCompleted": 6416,
  "totalStars": 349,
  "voteScore": 796,
  "tags": [
    "Puzzles",
    "Fundamentals",
    "Geometry",
    "Algebra",
    "Mathematics",
    "Algorithms",
    "Logic"
  ],
  "contributorsWanted": true,
  "unresolved": {
    "issues": 0,
    "suggestions": 3
  },
  "session": {
    "setup": "",
    "exampleFixture": ""
  }
}